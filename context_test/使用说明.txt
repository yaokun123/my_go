

##################################创建 context############################################################

1、context.Background() Context
这个函数返回一个空 context。这只能用于高等级（在 main 或顶级请求处理中）。这能用于派生我们稍后谈及的其他 context 。


2、context.TODO() Context
这个函数也是创建一个空 context。也只能用于高等级或当您不确定使用什么 context，或函数以后会更新以便接收一个 context 。

有趣的是，查看代码，它与 background 完全相同。
不同的是，静态分析工具可以使用它来验证 context 是否正确传递，这是一个重要的细节，
因为静态分析工具可以帮助在早期发现潜在的错误，并且可以连接到 CI/CD 管道。


3、context.WithValue(parent Context, key, val interface{}) Context
此函数接收 context 并返回派生 context，其中值 val 与 key 关联，并通过 context 树与 context 一起传递。
这意味着一旦获得带有值的 context，从中派生的任何 context 都会获得此值。
不建议使用 context 值传递关键参数，而是函数应接收签名中的那些值，使其显式化。


4、context.WithCancel(parent Context) (ctx Context, cancel CancelFunc)
这是它开始变得有趣的地方。此函数创建从传入的父 context 派生的新 context。
父 context 可以是后台 context 或传递给函数的 context。
返回派生 context 和取消函数。只有创建它的函数才能调用取消函数来取消此 context。
如果您愿意，可以传递取消函数，但是，强烈建议不要这样做。这可能导致取消函数的调用者没有意识到取消 context 的下游影响。
可能存在源自此的其他 context，这可能导致程序以意外的方式运行。简而言之，永远不要传递取消函数。


5、context.WithDeadline(parent Context, d time.Time) (Context, CancelFunc)
此函数返回其父项的派生 context，当截止日期超过或取消函数被调用时，该 context 将被取消。
例如，您可以创建一个将在以后的某个时间自动取消的 context，并在子函数中传递它。
当因为截止日期耗尽而取消该 context 时，获此 context 的所有函数都会收到通知去停止运行并返回。


6、context.WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
此函数类似于 context.WithDeadline。不同之处在于它将持续时间作为参数输入而不是时间对象。
此函数返回派生 context，如果调用取消函数或超出超时持续时间，则会取消该派生 context。



##################################函数接收和使用 Context##################################################
<-ctx.Done() 一旦 Done 通道被关闭，这个 <-ctx.Done(): 被选择。一旦发生这种情况，此函数应该放弃运行并准备返回。
这意味着您应该关闭所有打开的管道，释放资源并从函数返回。有些情况下，释放资源可以阻止返回，比如做一些挂起的清理等等。
在处理 context 返回时，您应该注意任何这样的可能性。